Reviewing SQL Concepts

1. What is index; types of indices; pros and cons
- Index is a special lookup that the database serach engine can use to speed up data retrieval. Query optimizer depends on indexed columns to function.
- There are two types of indices, Clustered index and Non-Clustered index.

- Clustered index: Clustered index is used to physically sort the table, and there can be only one clustered index per table. Primary key of the table automatically genereates clustered index of the table.

- Non-Clustered index: Non-Clustered index does not sort the table, but there can be multiple non-clustered indices per table. Foreign keys are usually good candidate for NC index because of JOIN. 

- Pros: As mentioned above, index can help us improve retrieving speed and performance of query (SELECT).
- Cons: When we use indices, SQL Server needs extra space to hold indices meaning that additional disk space is needed. Also, it can slow down other DML statements.


2. What's the difference between Primary key and Unique constraint?
- While a table can have only one primary key column, it can have multiple unique key. Also, primary key does not accept NULL values but unique key can accept NULL values (only one Null value for each column). Unique Key can be referenced by Foreign Key constraint, and primary key can be used as foreign key in other tables.

3. Tell me about check constraint
- By using check constraint, we can limit the values that can be placed in a column. Although other constraints also limit the values, check constraint can be used to limit the values more specifically. E.g. ADD CONSTRAINT chk_Age CHECK (Age BETWEEN 10 AND 90) --> only number(int) between 10 and 90 can be added to Age column.

4. Difference between temp table and table variable
- Although they are both stored in temp db, their life scope, size, usage, and structure vary. 
Life Scope: Table variables are deleted when the batch or stored procedure ends. However, local and global temp tables are deleted when the connection/all connections that have referenced them have closed. Also, we use @ to declare table variable and use #/## to declare local/global temp tables. 
Size: Microsoft recommends that we use table variable when we the data set is not too large (<100), otherwise temp tables.
Usage: We do not use temp table in stored procedure or function, but we can use table variables in stored procedure or funciton
Structure: We can create index/constraints (except foreign key) in temp tables, but we cannot create them in table variables.

5. Difference between WHERE and HAVING
- So we should first understand the execution order of the query.
FROM/JOIN -> WHERE -> GROUP BY -> HAVING -> SELECT -> DISTINCT -> ORDER BY
Hence, we must write WHERE clause before GROUP BY and HAVING clause after GROUP BY. Although they are both used as filters to select specific records from the table, they work differently. HAVING clause only applies to each group as a whole, while WHERE clause applys to individaul rows. Also, HAVING clause only filters an aggregate function and can only be used with SELECT statement. However, WHERE clause is used before aggregation and can be used with SELECT, UPDATE, and DELETE as well.

6. Difference between RANK() and DenseRank() â€” value gap
- RANK() and DenseRank() are both used as window function to get one extra column to the table. They both create a new column that ranks each row based on PARTITION BY, ORDER BY, and ROWS BETWEEN. However, when using RANK() if there is the same rank, there will be a gap for next rank. e.g. (11- 11- 13- 14). When using DENSE_RANK() if there is the same rank, there will not be a gap for next rank. e.g. (11- 11- 12- 13).

+ ROW_NUMBER() returns row number of sorted records starting with 1 with no nuplicate

+ syntax for ROWS BETWEEN: ROWS BETWEEN lower_bound AND upper_bound

7. COUNT(*) vs. COUNT(colName)
- COUNT(*) includes Null value and return the number of records. On the other hand, COUNT(colName) does not include Null values. So if we want to count number of orders or cities, we should use that specific column to avoid including Null values. 

8. What's the difference between left join and inner join? JOIN and Subquery, which one has a has better performance, why?
- We can use Venn Diagram to visualize left join and inner join. Inner join (JOIN) uses intersection of two tables to join them together. However, Left Join uses all the records from left table and matching records from the right table. For non-matching records in the right table, the result set will return Null values. 

- JOIN can only be used in FROM statement, while Subquery can be used in SELECT, WHERE, FROM, and ORDER BY statements. Although subqueries are often easier to understand and maintain, SQL server has an optimizer for JOIN. This causes JOIN to have better performance.
+ When we use GROUP BY multiple columns, Subquery can be more efficient than JOIN.

9. What is correlated subquery
- Correlated subquery is an inner query that is dependent on the outer query. When we use subquery in SELECT statement, we usually use correlated subquery.
e.g. SELECT c.ContactName, (SELECT COUNT(o.OrderId) FROM Orders o WHERE o.CustomerId=c.CustomerId) As numOrders
      FROM Customers c
      // here, o.CustomerId = c.CustomerId is dependent on the outer query.

10. What is a CTE, why do we need CTE?
- CTE stands for Common Table Expression. CTE's life scope is one SELECT clause and is used increase readability of the query. Also, CTE can call itself again and again through Recursive CTE. When using recursive CTE, we only use UNION ALL.
e.g. WITH empHierCTE
      AS(
      SELECT EmployeeId, FirstName, ReportsTo, 1 AS lvl
      FROM Employees
      WHERE ReportsTo IS NULL
      UNION ALL
      SELECT EmployeeId, FirstName, ReportsTo, cte.lvl + 1
      FROM Employees e JOIN empHierCTE cte
      ON e.ReportsTo = cte.Employeeid
      )
      
11. What does SQL Profiler do?
- SQL Server profiler is an interfacce to create and manage traces and analyze and replay trace results. Events are saved in a trace file that can later be analyzed or used ro replay a specific seris of steps when diagnosing a problem. (SQL Server Management Studio has SQL Profiler) It's under Tool bar in SSMS. 

12. What is SQL injection, how to avoid SQL injection?
- SQL Injection is a code injection technique that may destroy our database. It's a common web hacking technique that uses placement of malicious code in SQL statements via web page input. We can prevent SQL injection attacks by input validation and parametrized queries including prepared statements. Our application code should never use the input directly and the developer must sanitize all input.

- Input validation: Make sure the input is the accepted type, length, format, and so on.
- Parametrized queries/statements: Make sure that the parameters (e.g. inputs) passed into SQL statemetns are treated in a safe manner. So it is a means of pre-compiling a SQL statement so that all we have to supply are the parameters that need to be inserted into the statement for it to be executed.

13. Difference between SP and user defined function? When to use SP when to use function?
- There are several differences between SP and function. SP is used for DML (Data Manipulation Language) and function is used for calculations. We call SP by its name and we call function in SQL query. Also, SP may or may not have any output but function must return some value. Finally, SP can call function but Function cannot call SP.

- SP: is a prepared SQL query that can be saved and reused over and over again. We should avoid creating SP that accepts parameters for table names and we may use SET NOCOUNT ON option to stop the message that shows the count of the number of rows affected by SP. It can be also used to prevent SQL injection.
Syntax: CREATE PROC spName
        AS
        BEGIN
        ~~QUERY~~
        END
        
        EXEC spName

- Function: returns values or tables defined by the function call. We cannot directly call the function like SP, so we need to write dbo.funcName(params).
Syntax: CREATE FUNCTION funcName(@param1 paramType, @param2 paramType)
        RETURNS returnType (e.g. money, int, TABLE)
        AS
        BEGIN
        DECLARE variables (if necessary)
        SET variables (if necessary)
        RETRUN
        ~~QUERY~~
        END
1) If returning a value,
  SELECT dbo.funcName(someParams) AS someName
  FROM [Order Details]

2) If returning a table,
  SELECT *
  FROM dbo.funcName(someParams)


14. Criteria of Union and Union all? Difference between UNION and UNION ALL
- When we want to use UNION or UNION ALL, we need to consider two criteria. First is that the number of columns must be the same for each table. Second is that column types must be identical as well. Also, if we want to use Alias, we need to specify it in the first SELECT statement. Main difference between UNION and UNION ALL is that UNION removes all duplicate records while UNION ALL keeps them. Also, UNION sorts the result table based on first column ascendingly, but UNION ALL does not sort. As mentioned above, only UNION ALL can be used in recursive CTE.

15. Steps you take to improve SQL Queries
- Improving SQL queries is important since managing the database requires much resource. 

1) We should first look at the execution plan. It provides insight into query execution steps and processing efficiency. 
2) We can also choose index for each table more wisely to optimize the query. If there is no clustered index, we should create one. And if we notice some columns are used often (e.g. for JOIN), then we should create non-clustered index using those columns. 
3) By carefully analyzing the query, we may be able to avoid unnecessary joins and make sure we are using only the necessary tables. 
4) SELECT * is often undesirable as well.
5) As mentioned above, JOIN performs better than Subquery most of the time, so we should use JOIN when we can use it instead of subqueries. 
6) We can use derived tables (subquery in FROM statement) to avoid using GROUP BY statement. 
7) We should avoid using correlated subqueries to improve performance.
8) We should also avoid using user-defined scalar function in the WHERE clause, since function will be called for every input row. But using it is less problematic in SELECT statement, since the data is already filtered through WHERE clause
9) We can use CASE expressions to include varaible logic in a query. It can dynamically change column output on a row-by-row basis

+ User-defined scalar function returns a single data value of the type defined in the RETURNS clause

16. concurrency problem in transaction
- Concurrency problems occur when multiple transactions are trying to be executed at the same time or between delay of one transaction. There are number of concurrency problems.

1) Dirty Reads
- Occurs when one transaction updates an item and fails. But the updated item is used by another transaction before the item is changed or reverted back to its last value. So if T2 reads uncommitted data from T1 and T1 rolls back, then this problem occurs.
- Caused by isolation level read uncommitted and can be solved by isolation level read committed (default isolation)

2) Lost Update
- Occurs when an update done to a data item by one transaction is lost as it is overwritten by the update done by another transaction. If T1 and T2 both read and update the same data but T2 finishes before T1, then T2 will lose its updates.
- Caused by isolation level read commmitted and can be solved by isolation level repeatable read. Here, T2 is deadlocked until t1's transaction is done.

3) Non Repeatable Read
- Occurs when two or more read operations of the same transaction read different values of the same variable. So if T1 reads the same data twice while T2 is updating the data, this problem can occur.
- Caused by isolation level read committed and can be solved by isolation level repeatable read. Again, T2 will be executed after T1 is finished

4) Phantom Read
- Occurs when a transaction reads a variable once but when it tries to read that same variable again, an error occurs saying that the variable does not exist.
- Caused by isolation level repeatable read and can be solved by isolation level serializable.

So in general, for e-commerce we can go with READ COMMITTED, but for banking where it requires consistent data we should use SERIALIZABLE

- Serializable is the highest isolation level and prevents all possible types of concurrency phenomena in SQL Server, but on the other hand, the serializable level decreases performance and increases the likelihood of deadlocks.
- With Read Committed, transactions issue exclusive locks at the time of data modification, thus not allowing other transactions to read the modified data that is not yet committed.

17. what is deadlock, how to prevent
- deadlock is a situation in which two or more transactions are waiting for one another to give up locks. Under these circumstances, each process cannot continue and begins to wait for others to release the resource

There are few ways to prevent deadlocks happening.
1) Try to keep transactions short; this will avoid holding locks in a transaction for a long period of time.
2) Access objects in a similar logical manner in multiple transactions. So, after the first transaction commits or rolls back, the second continues, and a deadlock does not occur.
3) Create a covering index to reduce the possibility of a deadlock.
4) Use lower level isolation

18. what is normalization, 1NF - BCNF, benefits using normalization
- We can use normalization to organize the data and reduce the data redundancy. By doing so, we can waste less disk space and improve consistency throughout the data.

1NF: It's all about atomic values. For one cell, we want one value (e.g. (yellow, red, blue) in one cell under color column) and there should not be repeating groups in the table. (e.g. name1, name2, name3). Also each record should be unique

2NF: 1NF + We care about partical dependency. If a column in a table is not dependent on the row itself but other column, we should divide the table into multiple tables to avoid partial dependency. (e.g. columns: customerId, storeId, storeLocation --> storeLocation depends on storeId --> divide it into two tables)

3NF: 2NF + We care about transitive functional dependency. A transitive dependency is a functional dependency in which A --> C indirectly because A-->B B-->C, where B-->A is not the case. 3NF ensures reduction of data duplication and can achieve data integrity. (e.g. stuId,stuName,subId,subName --> stuId --> subId --> subName --> divide the talbe)

BCNF: Also known as 3.5NF. 3NF + We care only when there are multiple overlapping candidate keys.
(e.g. stuId, courseName, profName --> courseName depends on (stuId,profName) --> stuId,pId + pId,profName,courseName) here pId <-> profName.

candidate keys: a specific type of field in a relational database that can identify each unique record independently of any other data.

19. what are the system defined databases?
There are five system defined databases: master, model, tempdb, msdb, and resource.

Master: Catalog database that keeps info on all user defined databases. It contains all of the System level information for SQL Server.

Model: Whenever we make a database, (right click + properties), we can change the size. When we change the model's properties, the settings change for the next database accordingly. "Alter database" is the command. We can think of it as a template for all the databases created on SQL Server.

TempDb: It keeps temporary table and temporary stored procedures for usage in the query. Removes all tables after closing SQL

MsDb: It is where server agent keeps its activities. It is used to schedule alerts, jobs, and to record operators.
(server agent: allows the creation of "jobs" that help automate processes)

MsSQL system resource: Predefined functionalities. Predefined stored procedures are held here. Exampled of a stored procedure stored is Sp_Help that gives us a table of object name, owner, and object type of everything in the database. It contains system defined objects.

20. composite key
- Composite key is a specific type of primary key that uses the contents of two or more fields(columns) from a table to create a unique value. Primary key should consist of one column if not composite key.

21. candidate key
- Candidate key is a specific type of field in a relational database that can identify each unique record independently of any other data. It can be a single key or a group of multiple keys. Multiple candidate keys (two or more) can take place in any relationship. The attributes in a candidate key may contain a NULL value that opposes the primary key in it. --> primary key is basically a type of candidate key.

22. DDL vs. DML
- DDL: Data Definition Language that is used to define data structure. It allows creation objects in database (e.g. CREATE, ALTER, DROP, RENAME)

- DML: Data Manipulation Langauge that is used to manipulate data itself. It allows query and modify the data. (e.g. INSERT, UPDATE, MERGE, DELETE)

+ DCL: Data Control Language that allows us to determine who can see/modify the data (e.g. GRANT, DENY, REVOKE)

23. ACID property
- ACID refers to properties of transactions.

- A: Atomicity: Work is atomic. Either all of the work is done or none is done. Entire transaction takes place at once or doesn't happen at all. 
* Transaction Manager is reponsible for this property. (e.g. if debit is made successfully from one account, the correspoding credit is made to other account.)

- C: Consistency: Whatever happens in the middle of the transactions, this property will never leave process if there's an error. The database must be consistent before and after the transaction.  (e.g. total value of funds in both debit/credit accounts is the same at the start & end of each transaction)
* Application Manager is reponsible for this property.

- I: Isolation: Two transactions will be isolated from each other by locking the resource. Any violation to this will cause concurrency problem. Multiple transactions occur independently without intereference. (e.g. another transaction sees the transferred funds in one account or the other, but not in both nor in neither)
* Concurrency Control Manager is reponsible for this property.

- D: Durability: Once the transaction is completed, the changes made to the db will be saved. The changes of a successful transaction occrus even if the system failure occurs. (e.g. ensures that the changes made to each account will not be reversed)
* Recovery Manager is reponsible for this property.

24. table scan vs. index scan
- Table scan means iterate over all table rows. Index scan means iterate over all index items, when item index meets search condition, table row is retrived through index. Usualy index scan is less expensive than a table scan because index is more flat than a table. SQL Server optimizer can use index scan to optimize the process.

25. Difference between Union and JOIN
- While JOIN combines data into new columns, UNION combines data into new rows. JOIN combines data from multiple tables based on a matched condition between them (number of columns & data types selected may not be the same), but UNION combines the result-set of multiple SELECT statements (number of columns & data types selected must be the same). 

Things to study more:

Predefined Database
Parametrized queries
BCNF
ACID
